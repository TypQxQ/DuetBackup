# Runs before firmware thinks ToolN is selected
# Note: tool offsets are NOT applied at this point!
# parameters: T, wipe(true)
[gcode_macro TOOL_PICKUP]
gcode:
  {% if params.T is not defined %}
     { action_raise_error("TOOL_PICKUP: T parameter not defined.") }
  {% endif %}

  {% if "x" not in printer.toolhead.homed_axes or "y" not in printer.toolhead.homed_axes or "z" not in printer.toolhead.homed_axes %}
     { action_raise_error("TOOL_PICKUP: X, Y and Z are not homed.") }
  {% endif %}

  {% set t = params.T|int %}
  {% set tool_current = printer["gcode_macro LOCK_INIT"].tool_current|int %}

  # Set next tool to be mounted as the one to be selected.
  SET_GCODE_VARIABLE MACRO=LOCK_INIT VARIABLE=tool_next VALUE={t}

  # If mounted tool is unknown, then we can't unload it.
  {% if tool_current < -1 %}
     { action_raise_error("TOOL_PICKUP: Unknown tool already mounted Can't park it before selecting new tool.") }
  {% endif %}

  # If tool to be selected is not same as current tool and there is a current tool already selected.
  {% if tool_current != t and tool_current >= 0 %}
    TOOL_DROPOFF_001                     # Park current tool before selecting next.
  {% endif %}

  TOOL_PICKUP_001 {rawparams}

[gcode_macro TOOL_PICKUP_001]
gcode:
  {% set t = params.T|int %}
  {% set tool_current = printer["gcode_macro LOCK_INIT"].tool_current|int %}
  {% set wipe = False if params.WIPE is defined and params.WIPE|lower == 'false' else True  %}  # Wipe defaults to True

#  {% set wipe = params.WIPE|default(true)|bool %}

  M117 tool_current={tool_current}, t={t|string}

  # If no tool 
  {% if tool_current == -1 %}
    M117 Will pickup at X{printer["gcode_macro T"~t|string].park_x} Y{printer["gcode_macro T"~t].park_y}

        # Set Z offset before begining.
    SET_GCODE_OFFSET Z={printer["gcode_macro T"~t|string].offset_z}
    SAVE_GCODE_STATE NAME=TOOL_PICKUP
    G90
    {% if printer.toolhead.position.x < 500 %}
      G0 X500 Y{printer["gcode_macro T"~t|string].park_y} F40000   # Move near pickup and lift z so we don't crash the bed later.
    {% else %}
      G0 X500 F40000        # Move X and lift z so we don't crash the bed or into other tools.
      G0 Y{printer["gcode_macro T"~t|string].park_y} F40000            # Move Y after X and Z
    {% endif %}

    SET_GCODE_VARIABLE MACRO=HOMING_STATUS VARIABLE=maxx VALUE=0 # Don't use the X max as EmergencyStop.
  
    G0 X{printer["gcode_macro T"~t|string].zone_x} F40000              # Fast Move to the pickup position for tool.
    G0 X{printer["gcode_macro T"~t|string].park_x} F6000               # Slow Move to the pickup position for tool.
  
    M400                        # Wait for current moves to finish
    TOOL_LOCK                   # Lock the tool
    G0 X{printer["gcode_macro T"~t|string].zone_x} F6000               # Slow Move to the zone position for tool.

        # if the tool has an extruder
    {% if printer["gcode_macro T"~t].extruder !="none" %}
      UPDATE_DELAYED_GCODE ID=T{t}_standby DURATION=0
      UPDATE_DELAYED_GCODE ID=T{t}_powerdown DURATION=0

      ACTIVATE_EXTRUDER extruder={printer["gcode_macro T"~t].extruder}


          #if #tools[state.currentTool].heaters > 0 & heat.heaters[tools[state.currentTool].heaters[0]].current > heat.coldExtrudeTemperature & global.purgeOnToolChange=true
      {% if wipe and printer["gcode_macro LOCK_INIT"].purge_on_toolchange %}
        {% if  printer[printer["gcode_macro T"~params.T].extruder].temperature|float > 180 %}
          G92 E0               # Reset extruder
          G1 E3 F500           # Purge the nozzle. the amount when docked (8,33mm/s)
          G1 E5 F100           # Purge the nozzle. to clean (1,66mm/s)
          G4 H1.0              # Slight Delay
          G1 E-1.0 F2400       # Perform a retract to remove filament pressure. (40mm/s)
          G0 X555 F6000        # Retract the entire tool and wipe Backwards. (50mm/s)
          G0 X575 F6000        # Wipe Forwards.
          G0 X555 F6000        # Wipe Backwards.
          G0 X575 F6000        # Wipe Forwards.
          G0 X555 F6000        # Wipe Backwards.
          G0 X575 F6000        # Wipe Forwards.
          G92 E0               # Reset extruder
        {% endif %}
      {% endif %}

    {% endif %}

    G0 X500 F40000              # Fast Move to the safe position for tools.

        # Restore fanspeed
    {% if printer["gcode_macro T"~t].fan !="none" %}
      SET_FAN_SPEED FAN={printer["gcode_macro T"~t].fan} SPEED={printer["gcode_macro LOCK_INIT"].saved_fan_speed}
    {% endif %}

  
        # Check so the tool is mounted steady by slightly advancing the lock again until hit endstop, only if endstop not already hit. Do not wait for it to finish.
    SET_TMC_CURRENT STEPPER=tool_lock CURRENT=1.0
    MANUAL_STEPPER STEPPER=tool_lock Move=20 SPEED=50 STOP_ON_ENDSTOP=1 SYNC=0
    SET_TMC_CURRENT STEPPER=tool_lock CURRENT=0.8
  
    
    
    SET_GCODE_VARIABLE MACRO=HOMING_STATUS VARIABLE=maxx VALUE=1 # Use the X max as EmergencyStop.
  
    SET_GCODE_VARIABLE MACRO=LOCK_INIT VARIABLE=tool_current VALUE={t}
    SAVE_VARIABLE VARIABLE=tool_current VALUE={t}
    RESTORE_GCODE_STATE NAME=TOOL_PICKUP

    SET_GCODE_OFFSET X={printer["gcode_macro T"~t|string].offset_x} Y={printer["gcode_macro T"~t|string].offset_y} Z={printer["gcode_macro T"~t|string].offset_z}

  {% endif %}
  # Do not run anything if tool is already selected.

