[gcode_macro TOOL_PICKUP]
description: For internal use only. Called by T0, T1, etc.
# Runs before firmware thinks ToolN is selected
# T=nnn WIPE=n
# T: Tool number to switch to.
# WIPE: If should wipe the tool, defaults to true if not otherwise disabled.
gcode:
                                                                      # If T parameter is not provided then raise an error.
  {% if params.T is not defined %}
     { action_raise_error("TOOL_PICKUP: T parameter not defined.") }
  {% endif %}

                                                                      # If homing not XY are homed and Z is homed or homing then raise an error.
  {% set homing_status = printer["gcode_macro HOMING_STATUS"] %}

  {% if homing_status.x|int != 1 or homing_status.y|int != 1 or (homing_status.z|int == 0 or homing_status.z|int == 2)  %}
     { action_raise_error("TOOL_PICKUP: X, Y and Z are not homed.") }
  {% endif %}

  # Set some local variables.
  {% set tool_id = params.T|int %}
  {% set tool = printer["gcode_macro T"~tool_id] %}
  {% set current_tool_id = printer["gcode_macro LOCK_INIT"].tool_current|int %}

                                                                      # Set physical_tool_id to the physical tool when/if using virtual tools, defaults to tool_id. If this is a virtual tool then this will point to the parent physical tool.
  {% set physical_tool_id = printer["gcode_macro T"~tool_id].ercf_physical_tool|default(tool_id)|int %}
  {% set physical_tool = printer["gcode_macro T"~physical_tool_id] %}  # Object of the physical tool to pickup.

  {% if current_tool_id < -1 %}                                       # If mounted tool is unknown, then we can't unload it.
     { action_raise_error("TOOL_PICKUP: Unknown tool already mounted Can't park it before selecting new tool.") }
  {% endif %}

  
  {% if physical_tool.extruder !="none" %}                            # If the new tool to be selected has an extruder.
    M568 P{tool_id} A2                                                  #  We asume a heater and put it in active mode to begin heating.
  {% endif %}                                                         # /


  {% if current_tool_id != tool_id %}                                  # If tool to be selected is not same as current tool. Because then we do nothing.
    {% if current_tool_id >= 0 %}                                        # If there is a current tool already selected and it's a dropable.
                                                                           # If the next tool is not another ERCF tool on the same physical tool.
      {% if tool.ercf_physical_tool|default(-1)|int != printer["gcode_macro T"~current_tool_id].ercf_physical_tool|default(-2)|int %} 
        TOOL_DROPOFF_001                                                     # Drop current tool before selecting next.
        {% set current_tool_id = -1 %}                                       # Set current_tool_id to no tool mounted.
      {% endif %}                                                          # /
    {% endif %}                                                          # /

    # Now we asume tool has been deselected if needed be.

    {% if tool.type|default(1)|int == 1 %}                               # If the next tool is a Physical tool:
      SUB_TOOL_PICKUP_START {rawparams}                                    # Start Pickup tool
      SUB_TOOL_PICKUP_WIPE {rawparams}                                     # Wipe tool
      SUB_TOOL_PICKUP_END {rawparams}                                      # End Pickup tool code
      SUB_TOOL_PICKUP_DEPRESURIZE_HOTEND                                   # Depresurize tool

    {% elif tool.type|int == 2 %}                                        # Else If the next tool is a ERCF virtual tool:
        {% if current_tool_id|int >= 0 %}                                  # If there is a previous tool  
          {% set current_tool = printer["gcode_macro T"~current_tool_id] %}  # Set a local variable for current_tool.
                                                                             # If current tool and next tool have same physical tool.
          {% if current_tool.ercf_physical_tool|default(-1)|int == tool.ercf_physical_tool|default(-2)|int %}        
                                                                               # Run ERCF code
            RESPOND MSG="ERCF not implemented yet. Changing on same physical tool but diffrent ERCF tool. From {current_tool_id} to {tool_id}."
            SAVE_CURRENT_TOOL T={tool_id}                                      # Save tool to current_tool
          {% else %}                                                         # Else, not same physical extruder.
            SUB_TOOL_PICKUP_START T={tool_id}                                        # Pickup the physical tool for the virtual ERCF tool.
                                                                               # Run ERCF code
            RESPOND MSG="ERCF not implemented yet. Changing to ERCF with diffrent physical tool. From {current_tool_id} to {tool_id} with physical tool {tool.ercf_physical_tool|string}."
            SUB_TOOL_PICKUP_WIPE {rawparams}                                   # Wipe tool
            SUB_TOOL_PICKUP_END {rawparams}                                    # End Pickup tool code
            SUB_TOOL_PICKUP_DEPRESURIZE_HOTEND                                 # Depresurize tool
          {% endif %}                                                        # /
        {% else %}                                                         # Else, there is now no current_tool
          SUB_TOOL_PICKUP_START T={tool_id}                                        # Pickup the physical tool for the virtual ERCF tool.
                                                                             # Run ERCF code
          RESPOND MSG="ERCF not implemented yet. Changing to ERCF with diffrent physical tool. From {current_tool_id} to {tool_id} with physical tool {tool.ercf_physical_tool|string}."
          SUB_TOOL_PICKUP_WIPE {rawparams}                                   # Wipe tool
          SUB_TOOL_PICKUP_END {rawparams}                                    # End Pickup tool code
          SUB_TOOL_PICKUP_DEPRESURIZE_HOTEND                                 # Depresurize tool
        {% endif %}                                                        # /
    {% else %}                                                           # Else, next tool is unknon type
      RESPOND MSG="Tool type {tool.type} not supported."                   # error.
    {% endif %}                                                          # /
    M117 "T{tool_id} Loaded"                                             # Tool Loaded Message that stays on display.
  {% endif %}                                                          # /


[gcode_macro SUB_TOOL_PICKUP_START]
description: Internal subroutine. Do not use!
# Tnnn: Tool to pickup
gcode:
  RESPOND MSG="SUB_TOOL_PICKUP_START. tool_id={tool_id}, physical_tool_id={physical_tool_id}"

    ##############  Local Variables  ##############
  {% set tool_id = params.T|int %}
  {% set tool_lock = printer["gcode_macro LOCK_INIT"] %}

  # Set physical_tool_id to the physical tool when/if using virtual tools, defaults to tool_id. If this is a virtual tool then this will point to the parent physical tool.
  {% set physical_tool_id = printer["gcode_macro T"~tool_id].ercf_physical_tool|default(tool_id)|int%}
  {% set physical_tool = printer["gcode_macro T"~physical_tool_id] %}  # Object of the physical tool to pickup.

    ##############  Sanity Checks  ##############
  {% if tool_lock.tool_current|int != -1 %}     # If a tool is already mounted:
     { action_raise_error("TOOL_DROPOFF: X, Y and Z are not homed.") }   # Throw error.
  {% endif %}                                                          # /

    ##############  Move toolhead  ##############
  SAVE_GCODE_STATE NAME=TOOL_PICKUP                                    # Save GCODE state. Will be restored at the end of SUB_TOOL_PICKUP_END
  SET_GCODE_VARIABLE MACRO=HOMING_STATUS VARIABLE=maxx VALUE=0         # Don't use the X-max endstop as EmergencyStop.
  G90
  {% if printer.toolhead.position.x < tool_lock.safe_x %}                        # If Printer inside safezone:
    G0 X{tool_lock.safe_x} Y{physical_tool.park_y} F40000                          # Fast move XY inside the safezone.
  {% else %}                                                           # Else, outside of safezone:
    G0 X{tool_lock.safe_x} F40000                                                  # Fast move X inside the safezone, so we don't crash into other tools.
    G0 Y{physical_tool.park_y} F40000                                    # Fast move Y in front of parking spot.
  {% endif %}                                                          # /

  G0 X{physical_tool.zone_x} F40000                                    # Fast Move to the pickup position for tool.
  G0 X{physical_tool.park_x} F6000                                     # Slow Move to the pickup position for tool.

    ##############  Lock Tool  ##############
  M400                                                                 # Wait for all moves to finish.
  TOOL_LOCK                                                            # Lock the tool.
  SET_GCODE_OFFSET Z={physical_tool.offset_z} MOVE=1                   # Set and move the Z offset. Avoid crashing into bed when moving out later.

    ##############  Wait for heater  ##############
  {% set physical_tool_extruder = physical_tool.extruder|default("none")|lower %} # Set the Physical Extruder Name.
  {% if physical_tool_extruder|default("none")|lower !="none" %}       # If the tool has an extruder:
    M116 P{physical_tool_id}                                             # Wait for tool to reach target temperature.
    ACTIVATE_EXTRUDER extruder={physical_tool_extruder}                  # Activate extruder.
  {% endif %}                                                          # /

    ##############  Move out to zone  ##############
  G0 X{physical_tool.zone_x} F6000                                     # Slow Move to the zone position for tool.



[gcode_macro SUB_TOOL_PICKUP_WIPE]
description: Internal subroutine. Do not use!
# Tnnn: Tool to pickup
# Used for wiping the nozzle against a silicone flap.
# Any ERCF toolchange should be done before this.
gcode:
    ##############  Local Variables  ##############
  {% set wipe = params.WIPE|default(1)|int %}                          # Wipe parameter defaults to True.
  {% set tool_lock = printer["gcode_macro LOCK_INIT"] %}               # The Tool Lock object.
  {% set tool_id = params.T|int %}                                     # Tool id as provided with T parameter.
  {% set tool = printer["gcode_macro T"~tool_id] %}                    # Object of the tool to pickup.

                                                                       # Id to the physical tool when/if using virtual tools, defaults to tool_id. If this is a virtual tool then this will point to the parent physical tool.
  {% set physical_tool_id = printer["gcode_macro T"~tool_id].ercf_physical_tool|default(tool_id)|int %}
  {% set physical_tool = printer["gcode_macro T"~physical_tool_id] %}  # Object of the physical tool to pickup.
                                                                       # Wipe Type of tool, defaults to that of physical_tool or to 0
  {% set wipe_type = tool.wipe_type|default(physical_tool.wipe_type|default(0))|int %}


  {% if tool_lock.purge_on_toolchange|int != 1 %}                     # If the global wipe parameter is off
    {% set wipe = 0 %}                                                   # No wipe
  {% endif %}                                                          # /

                                                                      # If wipe is true, tool Wipe type is not None and physical_tool has an extruder:
  {% if wipe and wipe_type != 0 and physical_tool.extruder|default("none") != "none" %}
                                                                         # If Extruder can extrude:
      {% if printer[physical_tool.extruder].can_extrude|default('false')|lower|lower == 'true' %}
      G92 E0                                                              # Reset extruder
      M83                                                                 # Relative extrusion
      G1 E{physical_tool.meltzonelength|int + 2} F800                     # Deretract filament from meltzone. 13mm/s as in e3d example.
  
      {% if wipe_type == 1 %}                                             # If Wipe Type 1: No Wipe but load filament:
        # No Wipe                                                           # Do nothing
      {% elif wipe_type == 2 %}                                           # Else If Wipe Type 2:
                                                                            # Wipe with Silicone at position.
        SUB_TOOL_PICKUP_WIPE_SILICONE PARK_SIDE={physical_tool.wipe_silicone_park_side} PRINT_SIDE={physical_tool.wipe_silicone_print_side}
      {% elif wipe_type == 3 %}                                           # Else If Wipe Type 3:
        SUB_TOOL_PICKUP_WIPE_PEBLE                                          # Wipe with Pebble Wiper
      {% elif wipe_type == 4 %}                                           # Else If Wipe Type 4: Wipe with Silicone and Pebble Wiper:
                                                                            # Wipe with Silicone at position.
        SUB_TOOL_PICKUP_WIPE_SILICONE PARK_SIDE={physical_tool.wipe_silicone_park_side} PRINT_SIDE={physical_tool.wipe_silicone_print_side}
        SUB_TOOL_PICKUP_WIPE_PEBLE                                          # Wipe with Pebble Wiper
      {% endif %}                                                         # /
    {% endif %}                                                          # /
  {% endif %}                                                          # /

[gcode_macro SUB_TOOL_PICKUP_WIPE_SILICONE]
description: Internal subroutine. Do not use!
# purging and wiping on the silicone flap in front of tool park.
# PARK_SIDE=sssss PRINT_SIDE=sssss
gcode:
  G92 E0                                                              # Reset extruder
  M83                                                                 # Relative extrusion
  G1 E5 F100                                                          # Purge the nozzle. to clean (1,66mm/s)
  G4 H1.0                                                             # Slight Delay
  G1 E-1.0 F2400                                                      # Perform a retract to remove filament pressure. (40mm/s)
  G0 {params.PRINT_SIDE} F6000                                        # Retract the entire tool and wipe Backwards. (50mm/s)
  G0 {params.PARK_SIDE}  F6000                                        # Wipe Forwards.
  G0 {params.PRINT_SIDE} F6000                                        # Wipe Backwards.
  G0 {params.PARK_SIDE}  F6000                                        # Wipe Forwards.
  G0 {params.PRINT_SIDE} F6000                                        # Wipe Backwards.
  G0 {params.PARK_SIDE}  F6000                                        # Wipe Forwards.
  G92 E0                                                              # Reset extruder

[gcode_macro SUB_TOOL_PICKUP_WIPE_PEBLE]
description: Internal subroutine. Do not use!
# Finishing up the Pickup.
gcode:
  RESPOND MSG="SUB_TOOL_PICKUP_WIPE_PEBLE not yet implemented"

[gcode_macro SUB_TOOL_PICKUP_END]
description: Internal subroutine. Do not use!
# Finishing up the Pickup.
gcode:
    ##############  Local Variables  ##############
  {% set tool_id = params.T|int %}
  {% set tool_lock = printer["gcode_macro LOCK_INIT"] %}

  # Set physical_tool_id to the physical tool when/if using virtual tools, defaults to tool_id. If this is a virtual tool then this will point to the parent physical tool.
  {% set physical_tool_id = printer["gcode_macro T"~tool_id].ercf_physical_tool|default(tool_id)|int%}
  {% set physical_tool = printer["gcode_macro T"~physical_tool_id] %}  # Object of the physical tool to pickup.

    ##############  Local Variables  ##############
  G0 X{tool_lock.safe_x} F40000                                        # Fast Move to the safe position for tools.

    ##############  Check Tool Lock  ##############
  TOOL_LOCK_CHECK                                                      # Check so the tool is mounted by slightly advancing the lock again until hit endstop, only if endstop not already hit. Do not wait for it to finish.

    ##############  Set Fanspeed  ##############
  {% if physical_tool.fan|default("none")|lower !="none" %}            # If physical_tool has a fan
    SET_FAN_SPEED FAN={physical_tool.fan} SPEED={tool_lock.saved_fan_speed} # Set saved fan speed
  {% endif %}                                                          # /

  
    ##############  Finnish up  ##############
  M400                                                                 # Wait for current moves to finish.
  SET_GCODE_VARIABLE MACRO=HOMING_STATUS VARIABLE=maxx VALUE=1         # Use the X max as EmergencyStop.
  SAVE_CURRENT_TOOL T={tool_id}                                        # Save Pickedup Tool as Current 

  RESTORE_GCODE_STATE NAME=TOOL_PICKUP                                 # Restore GCODE state. Was saved at thebegining of SUB_TOOL_PICKUP_START
                                                                       # Set the toolhead offsets. Z is set and moved before any moves in SUB_TOOL_PICKUP_START. Needs to be after any RESTORE_GCODE_STATE!
  SET_GCODE_OFFSET X={physical_tool.offset_x} Y={physical_tool.offset_y} Z={physical_tool.offset_z} #MOVE=1

[gcode_macro SUB_TOOL_PICKUP_DEPRESURIZE_HOTEND]
description: Internal subroutine. Do not use!
# Restore hotend pressure
# Finishing up the Pickup.
gcode:
                                                                      # If temperature is above min extrude temp.
    {% if printer[printer.toolhead.extruder].can_extrude|default('false')|lower == 'true' %}
          G1 E0.8 F2400                                                 # Perform a deretract to return filament pressure. (40mm/s)
    {% endif %}                                                       # /

