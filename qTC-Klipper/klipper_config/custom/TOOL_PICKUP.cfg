# Runs before firmware thinks ToolN is selected
# Note: tool offsets are NOT applied at this point!
# parameters: T, wipe(true)
[gcode_macro TOOL_PICKUP]
gcode:
  {% if params.T is not defined %}
     { action_raise_error("TOOL_PICKUP: T parameter not defined.") }
  {% endif %}

  {% if "x" not in printer.toolhead.homed_axes or "y" not in printer.toolhead.homed_axes or "z" not in printer.toolhead.homed_axes %}
     { action_raise_error("TOOL_PICKUP: X, Y and Z are not homed.") }
  {% endif %}

  {% set t = params.T|int %}
  {% set tool = printer["gcode_macro T"~t] %}
  {% set tool_current_id = printer["gcode_macro LOCK_INIT"].tool_current|int %}

  RESPOND MSG="tool_current_id = T{tool_current_id}"

    # Set next tool to be mounted as the one to be selected.
  SET_GCODE_VARIABLE MACRO=LOCK_INIT VARIABLE=tool_next VALUE={t}

    # If mounted tool is unknown, then we can't unload it.
  {% if tool_current_id < -1 %}
     { action_raise_error("TOOL_PICKUP: Unknown tool already mounted Can't park it before selecting new tool.") }
  {% endif %}

  # If the new tool to be selected has an extruder, we asume a heater and put it in active mode to begin heating.
  {% if tool.extruder !="none" %}
    M568 P{t} A2
  {% endif %}

  # If tool to be selected is not same as current tool. Because then we do nothing.
  {% if tool_current_id != t %}
    # If there is a current tool already selected and it's a dropable.
    {% if tool_current_id >= 0 %}
      # If the next tool is not another ERCF tool on the same physical tool.
      {% if tool.ercf_physical_tool|default(-1)|int != printer["gcode_macro T"~tool_current_id].ercf_physical_tool|default(-1)|int %} 
        TOOL_DROPOFF_001                                        # Drop current tool before selecting next.
        {% set tool_current_id = -1 %}
      {% endif %}
    {% endif %}

    # Now we asume tool has been deselected if new tool is same physical tool as already mounted.

    # If the next tool is a Physical tool
    {% if tool.type|default(1)|int == 1 %}
      TOOL_PICKUP_001 {rawparams}                               # Pickup tool
    {% else %} 
        # If there is a previous tool
        {% if tool_current_id|int >= 0 %}        
          # If current tool and next tool have same physical tool.
          {% if printer["gcode_macro T"~tool_current_id].ercf_physical_tool|default(-1)|int == tool.ercf_physical_tool|default(-2)|int %}        
            RESPOND MSG="ERCF not implemented yet. Changing on same physical tool but diffrent ERCF tool. From {tool_current_id} to {t}."
            SAVE_CURRENT_TOOL T={t}
          {% else %} 
            TOOL_PICKUP_001 T={t} #ool.ercf_physical_tool|string}  # Pickup the physical tool for the virtual ERCF tool.
            RESPOND MSG="ERCF not implemented yet. Changing to ERCF with diffrent physical tool. From {tool_current_id} to {t} with physical tool {tool.ercf_physical_tool|string}."
          {% endif %}
        # If next tool has a diffrent physical tool.
        {% else %} 
          TOOL_PICKUP_001 T={t} #ool.ercf_physical_tool|string}    # Pickup the physical tool for the virtual ERCF tool.
          RESPOND MSG="ERCF not implemented yet. Changing to ERCF with diffrent physical tool. From {tool_current_id} to {t} with physical tool {tool.ercf_physical_tool|string}."
        {% endif %}
    {% endif %} # / If tool is physical or ERCF.
    M117 "T{t} Loaded"
  {% endif %}   # / If next tool and current tool are not same. 


[gcode_macro TOOL_PICKUP_001]
gcode:
  {% set tn = params.T|int %}                                    # Next Tool. Tool to be changed to.

  # Set t to the physical tool when/if using virtual tools, defaults to nt. If this is a virtual tool with another physical tool this will point to the parent physical tool.
  {% set t = printer["gcode_macro T"~tn].ercf_physical_tool|default(tn)|int%}

  {% set tool = printer["gcode_macro T"~t] %}                    # Object of the physical tool to pickup.
  {% set wipe = params.WIPE|default(1)|int %}                    # Wipe parameter defaults to True
  {% set safe_x = printer["gcode_macro LOCK_INIT"].safe_x|int %}
  
  RESPOND MSG="TOOL_PICKUP_001. tn={tn}, t={t}"

  # If no tool 
  {% if printer["gcode_macro LOCK_INIT"].tool_current|int == -1 %}
    RESPOND MSG="Will pickup at X{tool.park_x} Y{tool.park_y}"

    SAVE_GCODE_STATE NAME=TOOL_PICKUP
    G90
    {% if printer.toolhead.position.x < safe_x %}
      G0 X{safe_x} Y{tool.park_y} F40000                         # Move near pickup and lift z so we don't crash the bed later.
    {% else %}
      G0 X{safe_x} F40000                                        # Move X and lift z so we don't crash the bed or into other tools.
      G0 Y{tool.park_y} F40000                                   # Move Y after X and Z
    {% endif %}

    SET_GCODE_VARIABLE MACRO=HOMING_STATUS VARIABLE=maxx VALUE=0 # Don't use the X max as EmergencyStop.
  
    G0 X{tool.zone_x} F40000              # Fast Move to the pickup position for tool.
    G0 X{tool.park_x} F6000               # Slow Move to the pickup position for tool.
  
    M400                        # Wait for current moves to finish
    TOOL_LOCK                   # Lock the tool

      # Set and move the Z offset.
    SET_GCODE_OFFSET Z={tool.offset_z} MOVE=1

        # If the tool has an extruder wait for it to heat and then 
    {% set pe = tool.extruder %}
    {% if pe|default("none")|lower !="none" %}
      UPDATE_DELAYED_GCODE ID=T{t}_standby DURATION=0
      UPDATE_DELAYED_GCODE ID=T{t}_powerdown DURATION=0

      G0 X{tool.zone_x} F6000               # Slow Move to the zone position for tool.

      ACTIVATE_EXTRUDER extruder={pe}

        # Wait for temperature to reach active temperature +/- 1 degree.
      M116 P{t}

      # If the global wipe parameter is off or tool type is not a physical tool.
      {% if printer["gcode_macro LOCK_INIT"].purge_on_toolchange|int != 1 or tool.type|default(1) != 1 %}
        {% set wipe = 0 %}     # No wipe
      {% endif %}

      # If wipe and tool is hot enough
      {% if wipe and printer[pe].can_extrude|default('false')|lower == 'true' %}
          G92 E0               # Reset extruder
          G1 E{tool.meltzonelength|int + 2} F800 # Retract filament from meltzone
          G1 E5 F100           # Purge the nozzle. to clean (1,66mm/s)
          G4 H1.0              # Slight Delay
          G1 E-1.0 F2400       # Perform a retract to remove filament pressure. (40mm/s)
          G0 X555 F6000        # Retract the entire tool and wipe Backwards. (50mm/s)
          G0 X575 F6000        # Wipe Forwards.
          G0 X555 F6000        # Wipe Backwards.
          G0 X575 F6000        # Wipe Forwards.
          G0 X555 F6000        # Wipe Backwards.
          G0 X575 F6000        # Wipe Forwards.
          G92 E0               # Reset extruder

      # Else if not wiping
      {% else %} 
        G0 X{tool.zone_x} F6000               # Slow Move to the zone position for tool.
      {% endif %}

    {% endif %}

    G0 X500 F40000              # Fast Move to the safe position for tools.

        # Restore fanspeed
    {% if tool.fan|default("none")|lower !="none" %}
      SET_FAN_SPEED FAN={tool.fan} SPEED={printer["gcode_macro LOCK_INIT"].saved_fan_speed}
    {% endif %}

  
        # Check so the tool is mounted steady by slightly advancing the lock again until hit endstop, only if endstop not already hit. Do not wait for it to finish.
    SET_TMC_CURRENT STEPPER=tool_lock CURRENT=1.0
    MANUAL_STEPPER STEPPER=tool_lock Move=20 SPEED=50 STOP_ON_ENDSTOP=1 SYNC=0
    SET_TMC_CURRENT STEPPER=tool_lock CURRENT=0.8
  
    
    
    SET_GCODE_VARIABLE MACRO=HOMING_STATUS VARIABLE=maxx VALUE=1 # Use the X max as EmergencyStop.

      # Set and save the current tool variable.
    SAVE_CURRENT_TOOL T={tn}

    SET_GCODE_OFFSET X={tool.offset_x} Y={tool.offset_y} Z={tool.offset_z}

#    {% if wipe and printer[pe].can_extrude|default('false')|lower == 'true' %}
#          G1 E0.8 F2400       # Perform a deretract to return filament pressure. (40mm/s)
#    {% endif %}

    RESTORE_GCODE_STATE NAME=TOOL_PICKUP

  {% endif %}
  # Do not run anything if there is a tool mounted.

