# Enables saving of variables between powerdown of machine. Must be configured before [toollock].
[save_variables]
filename:  ~/variables.cfg

[toolgroup 0]
is_virtual: True            # If True then must have a physical_parent declared and shares extruder, hotend and fan with the physical_parent
physical_parent: 0          # Tool used as a Physical parent for all toos of this group. Only used if the tool i virtual.
pickup_gcode:
  RESPOND MSG="pickup_gcode from 'toolgroup 1' for tool_name={myself.name}, tool_current={printer.toollock.tool_current}. park at X{myself.park[0]} Y{myself.park[1]}"
dropoff_gcode:
  RESPOND MSG="dropoff_gcode. in tgroup1"

# Used to group several tools with similar settings.
[toolgroup 1]
is_virtual: False            # If True then must have a physical_parent declared and shares extruder, hotend and fan with the physical_parent
dropoff_gcode:
  RESPOND MSG="dropoff_gcode. in tgroup0"

## WipeType defaults to -1 which is No Wipe.
#[toolwipetype 0]
#tool_wipe_gcode:
    

[toollock]
purge_on_toolchange = True          # Here we can disable all purging. When disabled it overrides all other purge options. Defaults to true. This can be turned off by a macro for automatic probing hot tools without probing them. For example when doing TAMV or ZTATP.
#tool_move_direction = X             # Direction in which the toolhead moves to pickup a tool. X or Y.
#safe_max_direction = 500
#init_printer_to_last_tool = True   #Initialise as it was turned off, unlock tool if none was loaded or lock if one was loaded. Defaults to True
#wipetype: 0                         # WipeType number as defined by [toolwipetype n]. Overwrites setting in [toolgroup n] defaults to -1 which is No Wipe if not defined anywhere.
tool_lock_gcode:
    SAVE_GCODE_STATE NAME=tool_unlock_state                                         # Save gcode state
    RESPOND MSG="100"
    MANUAL_STEPPER STEPPER=tool_lock SET_POSITION=0                                 # Set assumed possition as rotated to min
    RESPOND MSG="200"
    MANUAL_STEPPER STEPPER=tool_lock Move=1 SPEED=30 STOP_ON_ENDSTOP=-1 SYNC=1      # Move until no longer endstop is triggered, max 1degree. If Endstop is not untriggered then raise an error. Wait for the movement before continuing.
    RESPOND MSG="300"
    SET_TMC_CURRENT STEPPER=tool_lock CURRENT=1.0                                   # Raise current of stepper temporarily
    RESPOND MSG="400"
    MANUAL_STEPPER STEPPER=tool_lock Move=150 SPEED=50 STOP_ON_ENDSTOP=1 SYNC=1     # Move to max and stop on endstop. If Endstop is not triggered then raise an error. Wait for the movement before continuing.
    RESPOND MSG="500"
    M400
    MANUAL_STEPPER STEPPER=tool_lock SET_POSITION=0                                 # Set manual extruder position as 0
    SET_TMC_CURRENT STEPPER=tool_lock CURRENT=0.7                                   # Decrease current to standard current.
    RESTORE_GCODE_STATE NAME=tool_unlock_state                                      # Restore gcode state
    M117 "Unknown tool Loaded"                                                      # Tool Loaded Message that stays on display.

tool_unlock_gcode:
    SAVE_GCODE_STATE NAME=tool_lock_state                                           # Save gcode state
    M400
    RESPOND MSG="1000"
    MANUAL_STEPPER STEPPER=tool_lock SET_POSITION=180                               # Set assumed possition as rotated to max
    M400
    RESPOND MSG="2000"
    MANUAL_STEPPER STEPPER=tool_lock Move=179 SPEED=30 STOP_ON_ENDSTOP=-1 SYNC=1    # Move until no longer endstop is triggered, max 1degree. If Endstop is not untriggered then raise an error. Wait for the movement before continuing.
    M400
    RESPOND MSG="3000"
    MANUAL_STEPPER STEPPER=tool_lock Move=0 SPEED=100 STOP_ON_ENDSTOP=1 SYNC=1      # Move to min and stop on endstop. If Endstop is not triggered then raise an error. Wait for the movement before continuing.
    M400
    RESPOND MSG="4000"
    MANUAL_STEPPER STEPPER=tool_lock SET_POSITION=0                                 # Set manual extruder position as 0
    M400
    RESTORE_GCODE_STATE NAME=tool_lock_state                                        # Restore gcode state
    M117 Tool Unloaded                                                              # Tool UnLoaded Message that stays on display.

# Selectable tool. Must be configured after [toolgroup n].
[tool 0]
tool_group: 0
extruder: extruder
is_virtual: True
physical_parent: 0
fan: extruder_partfan
zone: 585,5
park: 598,5
offset: 11.28,4.73,3.63
meltzonelength: 18
wipe_type: -1
#idle_to_standby_time: 30          # Time in seconds from being parked to setting temperature to standby the temperature above. Use 0.1 to change imediatley to standby temperature. Defaults to 30
#idle_to_powerdown_time: 600       # Time in seconds from being parked to setting temperature to 0. Use something like 86400 to wait 24h if you want to disable. Defaults to 600
# pickup_gcode= The code that is run when picking up the physical tool. Variable {myself} refers to the tool calling this code.
pickup_gcode: 
  SUB_TOOL_PICKUP_START T={myself.name}
  SUB_TOOL_PICKUP_END T={myself.name}
dropoff_gcode:
  RESPOND MSG="dropoff_gcode. in t0"
  SUB_TOOL_DROPOFF_START T={myself.name}
  SUB_TOOL_DROPOFF_END T={myself.name}

[tool 1]
tool_group: 0


[tool 49]
tool_group: 1
zone: 585,515
park: 598,515
offset: 0,0,0
pickup_gcode:
  SUB_TOOL_PICKUP_START T={myself.name}
  SUB_TOOL_PICKUP_END T={myself.name}
dropoff_gcode:
  RESPOND MSG="dropoff_gcode. in t49"
  SUB_TOOL_DROPOFF_START T={myself.name}
  SUB_TOOL_DROPOFF_END T={myself.name}

[gcode_macro SUB_TOOL_PICKUP_START]
description: Internal subroutine. Do not use!
# Tnnn: Tool to pickup
gcode:
  {%set myself = printer['tool '~params.T]%}

  SAVE_GCODE_STATE NAME=TOOL_PICKUP                                    # Save GCODE state. Will be restored at the end of SUB_TOOL_PICKUP_END
  SET_GCODE_VARIABLE MACRO=HOMING_STATUS VARIABLE=maxx VALUE=0         # Don't use the X-max endstop as EmergencyStop.
  G90

  ##############  Move in to zone  ##############
  {% if printer.toolhead.position.x < 500 %}                           # If Printer inside safezone:
    G0 X500 Y{myself.park[1]} F40000                                     # Fast move XY inside the safezone.
  {% else %}                                                           # Else, outside of safezone:
    G0 X500 F40000                                                       # Fast move X inside the safezone, so we don't crash into other tools.
    G0 Y{myself.park[1]} F40000                                          # Fast move Y in front of parking spot.
  {% endif %}                                                          # /

  ##############  Move in to parking spot  ##############
  G0 X{myself.zone[0]} F40000                                    # Fast Move near the pickup position for tool.
  G0 X{myself.park[0]} F6000                                     # Slow Move to the pickup position for tool.

    ##############  Lock Tool  ##############
  M400                                                                 # Wait for all moves to finish.
  TOOL_LOCK                                                            # Lock the tool.
  SET_GCODE_OFFSET Z={myself.offset[2]} MOVE=1                   # Set and move the Z offset. Avoid crashing into bed when moving out later.

    ##############  Wait for heater  ##############
  {% if myself.extruder|default("none")|lower !="none" %}       # If the tool has an extruder:
    M116 P{myself.name}                                             # Wait for tool to reach target temperature.
  {% endif %}                                                          # /

    ##############  Move out to zone  ##############
  G0 X{myself.zone[0]} F6000                                     # Slow Move to the zone position for tool.


[gcode_macro SUB_TOOL_PICKUP_END]
description: Internal subroutine. Do not use!
# Tnnn: Tool to pickup
gcode:
  {%set myself = printer['tool '~params.T]%}
    ##############  Move out to Safe position  ##############
  G0 X500 F40000                                                 # Fast Move to the safe position for tools.

    ##############  Check Tool Lock  ##############
  TOOL_LOCK_CHECK                                                      # MAcro to check so the tool is mounted by slightly advancing the lock again until hit endstop, only if endstop not already hit. Do not wait for it to finish.

 
    ##############  Finnish up  ##############
  M400                                                                 # Wait for current moves to finish.
  SET_GCODE_VARIABLE MACRO=HOMING_STATUS VARIABLE=maxx VALUE=1         # Use the X max as EmergencyStop.
  RESTORE_GCODE_STATE NAME=TOOL_PICKUP                                 # Restore GCODE state. Was saved at thebegining of SUB_TOOL_PICKUP_START
                                                                       # Set the toolhead offsets. Z is set and moved before any moves in SUB_TOOL_PICKUP_START. Needs to be after any RESTORE_GCODE_STATE!
  SET_GCODE_OFFSET X={myself.offset[0]} Y={myself.offset[1]} Z={myself.offset[2]}
  SUB_TOOL_PICKUP_DEPRESURIZE_HOTEND






[gcode_macro SUB_TOOL_DROPOFF_START]
description: Internal subroutine. Do not use!
# Tnnn: Tool to pickup
gcode:
  {%set myself = printer['tool '~params.T]%}

  {% if myself.name|int != printer.toollock.tool_current|int %}
    { action_raise_error("SUB_TOOL_DROPOFF_START: Wrong tool. Asked to dropoff T" ~ myself.name ~ " while current is T" ~ printer.toollock.tool_current ~ ".") }
  {% endif %}

  RESPOND MSG="Will drop off T{myself.name} at X{myself.park[0]} Y{myself.park[1]}"

  {% if myself.extruder|default("none")|lower !="none" %}       # If the tool has an extruder:
    M568 P{myself.name} A1                                        # Put tool heater in standby

                                                                  # If can extrude and global purge is active:
    {% if printer[myself.extruder].can_extrude|default("false")|lower == 'true' and printer.toollock.purge_on_toolchange() %}
      G1 E-4 F2700                                                  # retract filament from meltzone
      G1 E2 F800                                                    # Extrude slightly to form a tip
      G1 E-{myself.meltzonelength} F800                             # Retract filament from meltzone
    {% endif %}
  {% endif %}

  SET_GCODE_OFFSET X=0 Y=0                                      # Set XY offset to 0 so we park the tool right.
  SAVE_GCODE_STATE NAME=TOOL_DROPOFF_002                        # Save GCode state.
  G90                                                           # Absolute positions

  SET_GCODE_VARIABLE MACRO=HOMING_STATUS VARIABLE=maxx VALUE=0 # Don't use the X max as EmergencyStop.

  # Fast Move to the general pickup position for tools.
  {% if printer.toolhead.position.x|int < 500 %}
    G0 X500 Y{myself.zone[1]} F40000  # Move near pickup and lift z so we don't crash the bed later.
  {% else %}
    G0 X500 F40000               # Move X and lift z so we don't crash the bed or into other tools.
    G0 Y{myself.zone[1]} F40000            # Move Y after X and Z
  {% endif %}
  M400                                # Wait for current moves to finish

  G0 X{myself.zone[0]} F40000              # Fast Move near the dropoff position for tool.
  G0 X{myself.park[0]} F6000               # Slow Move to the dropoff position for tool.


[gcode_macro SUB_TOOL_DROPOFF_END]
description: Internal subroutine. Do not use!
# Tnnn: Tool to pickup
gcode:
  {%set myself = printer['tool '~params.T]%}

  M400                                # Wait for current moves to finish
  TOOL_UNLOCK                         # Unlock the tool

  G0 X{myself.zone[0]} F6000               # Slow Move to the pickup position for tool.
  G0 X500 F40000                           # Fast Move to the general pickup position for tools.
  M400

  SET_GCODE_VARIABLE MACRO=HOMING_STATUS VARIABLE=maxx VALUE=1 # Use the X max as EmergencyStop.
  RESTORE_GCODE_STATE NAME=TOOL_DROPOFF_002   # Restore Gcode state
