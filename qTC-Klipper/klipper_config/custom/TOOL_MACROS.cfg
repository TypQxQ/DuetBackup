[gcode_macro SUB_TOOL_LOCK_ENDSTOP_CHECK]
description: Before this is called and evaluated a QUERY_ENDSTOPS checks the endstops. If not triggered this will advance the stepper 1*, check the endstop and call the next step.
gcode:
    # If endstop is not triggered then try to lock again just in case the lock slipped. Need to check the endstops before calling this. 
    {% if printer.query_endstops.last_query['manual_stepper tool_lock']|default(0) == 0 %}
      {action_respond_info("TOOL_LOCK_ENDSTOP_CHECK: Endstop on manual_stepper tool_lock not triggered at check.") }
      MANUAL_STEPPER STEPPER=tool_lock SET_POSITION=140                                 # Set assumed possition as rotated to max (should already be this)
      MANUAL_STEPPER STEPPER=tool_lock Move=142 SPEED=50 STOP_ON_ENDSTOP=2 SYNC=1       # Move 2 degrees over max and stop on endstop. If Endstop is not triggered then raise an error. Wait for the movement before continuing.
      M400
      QUERY_ENDSTOPS
      SUB_TOOL_LOCK_ENDSTOP_CHECK_SECONDSTAGE
    {% endif %}

[gcode_macro SUB_TOOL_LOCK_ENDSTOP_CHECK_SECONDSTAGE]
description: Before this is called and evaluated a QUERY_ENDSTOPS checks the endstops. If not triggered this either pause the print or throw an error.
gcode:
    # If endstop is not triggered then pause or raise error.
    {% if printer.query_endstops.last_query['manual_stepper tool_lock']|default(0) == 0 %}
      {action_respond_info("SUB_TOOL_LOCK_ENDSTOP_CHECK_SECONDSTAGE: Endstop on manual_stepper tool_lock still not triggered at second check.") }
      {% if printer['gcode_macro HOMING_STATUS'].z|int == 3 %}  # If printer is homing Z
        { action_emergency_stop("The tool didn't lock during homing.") }     # Emergency stop so we don't crash the bed. Pause won't work.
      {% endif %}
      SET_TMC_CURRENT STEPPER=tool_lock CURRENT=0.7             # Decrease current to somewhat lower current.
      PAUSE_NOHEAT                                              # Turn off extruder heaters but leave bed and pause.
    {% endif %}

[gcode_macro SUB_TOOL_LOCK_CHECK]
description: Check so the tool is mounted by slightly advancing the lock again until hit endstop, only if endstop not already hit. Do not wait for it to finish.
gcode:
  # If endstop is not triggered then try to lock again for safety. Need to check the endstops before calling this. 
  {% if printer.query_endstops.last_query['manual_stepper tool_lock']|default(0) == 0 %}
    SET_TMC_CURRENT STEPPER=tool_lock CURRENT=1.0
    MANUAL_STEPPER STEPPER=tool_lock SET_POSITION=140                                 # Set assumed possition as rotated to max (should already be this)
    MANUAL_STEPPER STEPPER=tool_lock Move=150 SPEED=50 STOP_ON_ENDSTOP=2 SYNC=1       # Move 10 degrees over max and stop on endstop. If Endstop is not triggered then raise an error. Wait for the movement before continuing.
    # Ceck if the tool is locked by checking on the endstops.
    QUERY_ENDSTOPS
    SUB_TOOL_LOCK_ENDSTOP_CHECK
    M400
    SET_TMC_CURRENT STEPPER=tool_lock CURRENT=0.8
  {% endif %}


[gcode_macro SUB_TOOL_UNLOCK_ENDSTOP_CHECK]
description: Before this is called and evaluated a QUERY_ENDSTOPS checks the endstops. If not triggered this either pause the print or throw an error.
gcode:
    # If endstop is not triggered then pause or raise error.
    {% if printer.query_endstops.last_query['manual_stepper tool_lock']|default(0) == 0 %}
      {action_respond_info("SUB_TOOL_UNLOCK_ENDSTOP_CHECK: Endstop on manual_stepper tool_lock still not triggered at unlock.") }
      {% if printer['gcode_macro HOMING_STATUS'].z|int == 3 %}  # If printer is homing Z
        { action_emergency_stop("The tool didn't unlock during homing.") }     # Emergency stop so we don't crash the bed. Pause won't work.
      {% endif %}
      SET_TMC_CURRENT STEPPER=tool_lock CURRENT=0.7             # Decrease current to somewhat lower current.
      PAUSE_NOHEAT                                              # Turn off extruder heaters but leave bed and pause.
    {% endif %}


[gcode_macro M106]
variable_fan_speed: 0
description: Snnn Pnnn
  Set fan speed. A tool and toollock must be configured for this to work.
  S: Fan speed 0-1 or 2-255 (optional, defult 1, full speed)
  P: Tool (optional, defaults to the currently selected tool)
  The P parameter specifies tool instead of fan number as in RRF.
gcode:
  {% set newparameters = "" %}  # Parameters to be passed to subroutines in new format.

  # S= Fan speed 0-1 or 2-255 (optional, defult 1, full speed)
  {% if params.S is defined %}
    {% set newparameters = newparameters ~ " S="~params.S %}                   # Set heater_standby_temp to new parameters.
  {% endif %}

  # P= Tool number
  {% if params.P is defined %}
    {% set newparameters = newparameters ~ " P="~params.P %}                   # Set heater_standby_temp to new parameters.
  {% endif %}
  SET_AND_SAVE_FAN_SPEED{newparameters}

[gcode_macro M107]
description: Pnnn
  Turn off fan.
  P = Tool (optional and defaults to the currently selected tool)
gcode:       
  {% if params.P is defined %}
    {% set p = " P"~params.P %}
  {% endif %}
  M106 {p|default("")} S0

[gcode_macro G10]
description: See M568. Passtrough to M568.
gcode:
  M568 {rawparams}



[gcode_macro M568]
description: Pnnn Rnnn Snnn An Nnnn Mnnn
  Set tool temperature.
  P= Tool number, optional. If this parameter is not provided, the current tool is used.
  R= Standby temperature(s), optional
  S= Active temperature(s), optional
  A = Heater State, optional: 0 = off, 1 = standby temperature(s), 2 = active temperature(s).
  N = Time in seconds to wait between changing heater state to standby and setting heater target temperature to standby temperature when standby temperature is lower than tool temperature.
      Use for example 0.1 to change immediately to standby temperature.
  O = Time in seconds to wait from docking tool to shutting off the heater, optional.
      Use for example 86400 to wait 24h if you want to disable shutdown timer.
gcode:
#  RESPOND MSG="M568: Seting new temperature: {rawparams}"
  {% set newparameters = "" %}  # Parameters to be passed to subroutines in new format.

  # P= Tool number
  {% if params.P is defined %}
    {% set newparameters = newparameters ~ " TOOL="~params.P %}                   # Set heater_standby_temp to new parameters.
  {% endif %}

  # R= Standby temperature
  {% if params.R is defined %}
    {% set newparameters = newparameters ~ " STDB_TMP="~params.R %}                   # Set heater_standby_temp to new parameters.
  {% endif %}

  # S= Active temperature
  {% if params.S is defined %}
    {% set newparameters = newparameters ~ " ACTV_TMP="~params.S %}                    # Set heater_active_temp to new parameters.
  {% endif %}

  # N = Time in seconds to wait from docking tool to putting the heater in standy
  {% if params.N is defined %}
    {% set newparameters = newparameters ~ " STDB_TIMEOUT="~params.N %}                  # Set idle_to_standby_time to new parameters.
  {% endif %}

  # M = Time in seconds to wait from docking tool to shuting off the heater
  {% if params.O is defined %}
    {% set newparameters = newparameters ~ " SHTDWN_TIMEOUT="~params.O %}                  # Set idle_to_powerdown_time to new parameters.
  {% endif %}

  # A = Heater State, optional: 0 = off, 1 = standby temperature(s), 2 = active temperature
  {% if params.A is defined %}
    {% set newparameters = newparameters ~ " CHNG_STATE="~params.A %}                            # Set idle_to_powerdown_time to new parameters.
  {% endif %}

#  {action_respond_info("M568: Running: SET_TOOL_TEMPERATURE"~newparameters)}
  SET_TOOL_TEMPERATURE{newparameters}

[gcode_macro M116]
description: Pnnn Hnnn Snnn
  Waits for all temperatures, or a specified tool or heater's temperature.
  This command can be used without any additional parameters.
  Without parameters it waits for bed and current extruder.
  Only one of either P or H may be used.

  Pnnn Tool number.
  Hnnn Heater number. 0="heater_bed", 1="extruder", 2="extruder1", etc.
  Snnn Tolerance in degC. Defaults to 1*C. Wait will wait until heater is between set temperature +/- tolerance.

gcode:
  {% set newparameters = "" %}  # Parameters to be passed to subroutine in new format.


  {% if params.P is defined %}
    {% set newparameters = newparameters ~ " TOOL=" ~ params.P %}                   # Set Tool to new parameters.
  {% endif %}

  {% if params.H is defined %}
    {% set newparameters = newparameters ~ " HEATER=" ~ params.H %}                   # Set Tool to new parameters.
  {% endif %}

  {% if params.S is defined %}
    {% set newparameters = newparameters ~ " TOLERANCE=" ~ params.S %}                   # Set Tool to new parameters.
  {% endif %}

  TEMPERATURE_WAIT_WITH_TOLERANCE{newparameters}


[gcode_macro TOOL_DROPOFF]
gcode:
  T_1

[gcode_macro Tool_0]
gcode:
  T0

[gcode_macro Tool_1]
gcode:
  T1

[gcode_macro Tool_2]
gcode:
  T2

[gcode_macro Tool_3]
gcode:
  T3

[gcode_macro Tool_4]
gcode:
  T4

[gcode_macro Tool_5]
gcode:
  T5

[gcode_macro Tool_6]
gcode:
  T6

[gcode_macro Tool_7]
gcode:
  T7

[gcode_macro Tool_8]
gcode:
  T8

[gcode_macro Tool_9]
gcode:
  T9

[gcode_macro Tool_10]
gcode:
  T10

[gcode_macro Tool_11]
gcode:
  T11

[gcode_macro Tool_12]
gcode:
  T12

[gcode_macro ToolUnlock]
gcode:
  Tool_Unlock
  M117 Current Tool set to -1
  { action_respond_info('Current Tool set to -1 (Unlocked).') }

[gcode_macro ToolLock]
gcode:
  Tool_Lock
  M117 Current Tool set to -2
  { action_respond_info('Current Tool set to -2 (Unknown tool). To indicate actual tool, use SAVE_CURRENT_TOOL Tn') }

[gcode_macro SAVE__CURRENT__TOOL]
gcode:
  {% if params.T is defined %}
    SAVE_CURRENT_TOOL T{params.T}
  {% endif %}

[gcode_macro SAVE_ACCELERATION]
variable_max_accel: 0
gcode:
  SET_GCODE_VARIABLE MACRO=SAVE_ACCELERATION VARIABLE=max_accel VALUE={printer.toolhead.max_accel}

[gcode_macro RESTORE_ACCELERATION]
gcode:
  {% if printer['gcode_macro SAVE_ACCELERATION'].max_accel|int == 0 %}
    { action_respond_info("RESTORE_ACCELERATION: No acceleration saved.") }
  {% else %}
    M204 S{printer['gcode_macro SAVE_ACCELERATION'].max_accel}
  {% endif %}
