[gcode_macro G10]
# rename_existing: G10.1
gcode:
  M568 {rawparams}



[gcode_macro M568]
# M568 Pnnn Rnnn Snnn An Nnnn Mnnn
# P= Tool number. If this parameter is not provided, the current tool is used.
# R= Standby temperature(s)
# S= Active temperature(s)
# A = Required heater state: 0 = off, 1 = standby temperature(s), 2 = active temperature(s)
# N = Time in seconds to wait from docking tool to putting the heater in standy
# O = Time in seconds to wait from docking tool to shuting off the heater
gcode:
  { action_respond_info("M568: Seting new temperature: "~rawparams) }

  {% if params.P is defined %}
    {% set t = params.P|int %}
  {% elif printer["gcode_macro LOCK_INIT"].tool_current|int >= 0 %}
    {% set t = printer["gcode_macro LOCK_INIT"].tool_current|int %}
  {% else %}
    { action_raise_error("M568: No tool selected and no tool defined.") }
  {% endif %}


  # Set tool_current_id to the physical tool when/if using virtual tools, defaults to tv. If this is a virtual tool with another physical tool this will point to the parent physical tool.
  {% set tp = printer["gcode_macro T"~t].ercf_physical_tool|default(t)|int %}  # Physical tool.
  { action_respond_info("M568:  tp="~tp~", t="~t~".") }

    # My first 9 tools are the same physical tool so map to same extruder.
  {% if t|int >= 0 and t|int < 9 %}
    {% set t = 0 %}
  {% endif %}

      # If tool has no extruder raise an info and exti
  {% if printer["gcode_macro T"~t].extruder !="none" %}

        # R= Standby temperatrure
    {% if params.R is defined %}
      SET_GCODE_VARIABLE MACRO=T{t} VARIABLE=heater_standby_temp VALUE={params.R}
    {% endif %}

        # S= Active temperature(s)
    {% if params.S is defined %}
      SET_GCODE_VARIABLE MACRO=T{t} VARIABLE=heater_active_temp VALUE={params.S}
    {% endif %}

        # N = Time in seconds to wait from docking tool to putting the heater in standy
    {% if params.N is defined %}
      SET_GCODE_VARIABLE MACRO=T{tp} VARIABLE=idle_to_standby VALUE={params.N}
    {% endif %}

        # M = Time in seconds to wait from docking tool to shuting off the heater
    {% if params.O is defined %}
      SET_GCODE_VARIABLE MACRO=T{tp} VARIABLE=idle_to_powerdown VALUE={params.O}
    {% endif %}

    M56800001 T={t} {rawparams}

  {% else %} # If the tool has no extruder
    {action_respond_info("M568: T"~t~" tool has no extruder")}
  {% endif %}

[gcode_macro M56800001]
# M568 Rawparams as in M568 and T
# T= Tool number passed from previous command
gcode:
  {% set t = params.T %}                                              # t: Tool Id

  # Set tool_current_id to the physical tool when/if using virtual tools, defaults to tv. If this is a virtual tool with another physical tool this will point to the parent physical tool.
  {% set tp = printer["gcode_macro T"~t].ercf_physical_tool|default(t)|int %}  # tp: Physical tool.
  { action_respond_info("M568:  tp="~tp~", t="~t~".") }

  {% set te = printer["gcode_macro T"~tp].extruder %}                 # te = Tool Extruder
  {% set hs = printer["gcode_macro T"~tp|string].heater_state|int %}  # hs: Heater State

    # A = Required heater state: 0 = off, 1 = standby temperature(s), 2 = active temperature(s)
  {% if params.A is defined %}                                                                          # If mode is changed
    SET_GCODE_VARIABLE MACRO=T{tp} VARIABLE=heater_state VALUE={params.A}                                # Save the new mode

    {% if params.A|int == 0 %}                                                                           # If Off mode
      SET_HEATER_TEMPERATURE HEATER={te} TARGET=0                                                        # Set temperature to 0
      M56800003 T{tp} N0 O0                                                                              # Disable standy temperature and standby to shutdown timer.

    {% elif params.A|int == 2 %}                                                                         # If Active mode
      SET_HEATER_TEMPERATURE HEATER={te} TARGET={printer["gcode_macro T"~t].heater_active_temp}          # Set temperature to active temperature.
      M56800003 T{tp} N0 O0                                                                              # Disable standy timers.

    {% elif params.A|int == 1 %}                                                                         # If Standby mode
      {% if printer["gcode_macro T"~t].heater_standby_temp|int > printer[te].temperature|int %}          # If standby temperature is higher than the current temperature
        M56800003 T{tp} N0.1 O{printer["gcode_macro T"~tp].idle_to_powerdown}                             # Disable standy temperature timer and start standby to shutdown timer.
      {% else %}                                                                                         # Else (Standby temperature is lower than the current temperature)
        M56800003 T{tp} N{printer["gcode_macro T"~tp].idle_to_standby} O{printer["gcode_macro T"~tp].idle_to_powerdown}  # Start the standby and shutdown temperature timers.
      {% endif %}                                                                                        # Endif Standby temperature
    {% endif %}                                                                                          # Endif Type of mode
  {% else %}                                                                                             # Else (If no param.A is provided)
    {% if hs == 1 and params.R is defined %}                                                             # If tool is in standby mode and standby temperature is defined
      M56800003 T{tp} N{printer["gcode_macro T"~tp].idle_to_standby} O{printer["gcode_macro T"~tp].idle_to_powerdown}  # Start the standby and shutdown temperature timers.
      SET_HEATER_TEMPERATURE HEATER={te} TARGET={params.R}                                               # Set the standby temperature instantly
    {% elif hs == 2 and params.S is defined %}                                                           # ElseIf tool is in active mode and active temperature is defined
      M56800003 T{tp} N0 O0                                                                               # Disable standy timers.
      SET_HEATER_TEMPERATURE HEATER={te} TARGET={params.S}                                               # Set temperature to active temperature.
    {% endif %}                                                                                          # Endif new temperature for current mode
  {% endif %}                                                                                            # Endif param.A is defined


[gcode_macro M56800003]
# Subroutine Only for setting the delayed gcode standby timers.
# T= Tool number passed from previous command
# N = Time in seconds to wait from docking tool to putting the heater in standy
# O = Time in seconds to wait from docking tool to shuting off the heater
gcode:
  UPDATE_DELAYED_GCODE ID=T{params.T}_standby DURATION={params.N}
  UPDATE_DELAYED_GCODE ID=T{params.T}_powerdown DURATION={params.O}
