[gcode_macro _MMU_CUT_TIP]
description: Cut filament by pressing the cutter on a pin with a horizontal movement. 

# Distance to retract prior to making the cut, this reduces wasted filament but might cause clog 
# if set too large and/or if there are gaps in the hotend assembly 
# This must be less than the distance from the nozzle to the cutter.
variable_retract_length: 33

# The location of the pin, this should be the position of the toolhead when the cutter 
# just lightly touches the pin
variable_pin_loc_x: 534
variable_pin_loc_y: 429

# The starting and end positions when making the cut
# In particular, instead of making the cut by traveling to the pin location above, 
# we leave a small safety margin along X-axis to avoid scratching on the pin when traveling
# This should also give a small distance to produce some momentum when pressing on the pin 
# variable_pin_park_x_dist: 18.0

# Position of the toolhead when the cutter is fully compressed
# Should leave a small headroom (e.g., should be a bit larger than 0, or whatever xmin is) to avoid banging the toolhead or gantry
variable_pin_loc_x_compressed: 549

#  Retract length and speed after the cut so that eh cutter can go back into its origin position
variable_rip_length: 1
variable_rip_spd: 750

# Pushback of the remaining tip from the cold end into the hotend
variable_pushback_length: 20
variable_push_dwell_time: 50 # time to dwell between the pushback

# Speed related settings
# Note that if the cut speed is too fast, the steppers can lose steps
# Therefore, for a cut: 
# - We first make a fast move to accumulate some momentum and get the cut blade to the initial contact with the filament
# - We then make a slow move for the actual cut to happen 
variable_travel_spd: 40000 #7800 
variable_cut_fast_move_spd: 2000
variable_cut_slow_move_spd: 500
variable_evacuate_speed: 40000
variable_cut_dwell_time: 50 # time to dwell at the cut point in ms 50
variable_cut_fast_move_fraction: 0.8 # 1.0 fraction of the move that uses fast move 

# Whether or not to make a second cut
# The goal of the second cut is to avoid filament adding friction to the blade causing the lever unable to decompress
# If set to a positive value, we first retract this amount, make the second cut, then extrude back
# Set to 0 to disable to second cut
# You should only enable this if you cannot get the lever to reliabily decompress.
variable_second_cut_retract_length: 0

# Whether to eject the filament at the end. Do not change. Changed by mmu.py.
variable_final_eject: 0

# Currently ERCF software assumes that tip forming move always moves the extruder (and consequently the encoder)
# Ideally, we should bring formal support of filament cutters to the ERCF software
# In the short term, we perform a "hack" where we wiggle the extruder a little after cutting, 
# if the extruder did not make enough movement during the filament cutting phase.
variable_extruder_minimum_movement: 0 # the minimum extruder movement required for this tip forming move, this depends on the minimum distance that the encoder can reliably detect
                                      # setting it to a lower value requires the ERCF encoder to be more sensitive.
variable_extruder_wiggle_length: 10 # the length to retract -> extrude during a wiggle, this needs to be large enough for the encoder to detect the movement
variable_extruder_wiggle_repeat: 3 # number of repeats for the wiggle

# Optionally move to location immediately after making the cut
# variable_x_after_toolchange: 500
#variable_y_after_toolchange: -1000

variable_output_park_pos: 37.5 #  this should be set to the distance from the nozzle tip to the blade for filametrix type cutter

gcode:
    {% set RETRACT_LENGTH = params.RETRACT_LENGTH | default(printer['gcode_macro _MMU_CUT_TIP']['retract_length']) | float %}
    {% set PUSHBACK_LENGTH = params.PUSHBACK_LENGTH | default(printer['gcode_macro _MMU_CUT_TIP']['pushback_length']) | float %}
    {% set FINAL_EJECT = params.FINAL_EJECT | default(printer['gcode_macro _MMU_CUT_TIP']['final_eject'], True) | int %}
    {% set current_loc_x = printer.gcode_move.gcode_position.x %}
    {% set current_loc_y = printer.gcode_move.gcode_position.y %}
    {% set push_dwell_time = printer['gcode_macro _MMU_CUT_TIP']['push_dwell_time'] | float %}

    {% set current_offset_x = printer.gcode_move.position.x - printer.gcode_move.gcode_position.x %}
    {% set current_offset_y = printer.gcode_move.position.y - printer.gcode_move.gcode_position.y %}

    # {%set myself = printer['ktcc_tool '~params.T]%}

    {% set pin_park_x_loc = pin_loc_x - current_offset_x %}
    {% set pin_park_y_loc = pin_loc_y - current_offset_y %}
    {% set pin_loc_x_compressed = pin_loc_x_compressed - current_offset_x %}
    # {% set _extruder_moved_dist = 0 %}

    # Check if we can extrude. Otherwise don't do anything.
    # {% if myself.extruder|default("none")|lower !="none" %}       # If the tool has an extruder:
    #     {% if printer[myself.extruder].can_extrude|default("false")|lower == 'true' and printer.ktcc_toolchanger.purge_on_toolchange %}
    {% set tc = printer.ktcc_toolchanger.tool_current|int %}                     # Get the current locked tool.
    # RESPOND MSG="MMU_CUT: tc is:{tc}."
    {% if tc|int < 0 or tc > 8 %}  # If a MMU tool is not selected then we can't cut the filament.
        RESPOND PREFIX="error" MSG="Tool for MMU not selected. Can't cut filament."
    {% elif printer[printer.toolhead.extruder].can_extrude|default("false")|lower == 'true' %}

        SAVE_GCODE_STATE NAME=_MMU_CUT_TIP_state
        
        {% if ("x" not in printer.toolhead.homed_axes) or ("y" not in printer.toolhead.homed_axes) %}
            G28 X Y
        {% endif %}

        SET_PRESSURE_ADVANCE ADVANCE=0 # temporaily disable PA it's already saved by MMU.py


        M83 # relative extrusion
        {% if RETRACT_LENGTH > 0 %}
            # G1 E-{RETRACT_LENGTH} F3000 # retract to save filament waste

            ##############  Retract the filament as per e3d Revo documentation  ##############
            G1 E-4 F2700                                                  # retract filament from meltzone
            G1 E2 F800                                                    # Extrude slightly to form a tip
            G1 E-{RETRACT_LENGTH - 2} F800                     # Retract filament from meltzone
        {% endif %}

        SET_GCODE_VARIABLE MACRO=HOMING_STATUS VARIABLE=maxx VALUE=0         # Don't use the X max as EmergencyStop.

        G90 # absolute positioning
        ##############  Move in to zone  ##############
        {% if printer.toolhead.position.x < 500 %}                           # If Printer inside safezone:
            G0 X500 Y{pin_park_y_loc} F{travel_spd}                             # Fast move XY inside the safezone.
        {% else %}                                                           # Else, outside of safezone:
            G0 X500 F{travel_spd}                                                       # Fast move X inside the safezone, so we don't crash into other tools.
            G0 Y{pin_park_y_loc} F{travel_spd}                                          # Fast move Y in front of parking spot.
        {% endif %}                                                          # /
        G0 X{pin_park_x_loc} F{travel_spd}                        # Fast Move to the zone position for tool.

        # Make the main cut 
        _DO_CUT_MOTION RIP_LENGTH={rip_length}
        # {% set _extruder_moved_dist = _extruder_moved_dist + rip_length %}
        
        # Optional secondary cut to help decompressing the lever. A better option would be to test the lever with a switch mounted besides the cut arm and do the cut or pause if not decompressed.
        {% if second_cut_retract_length > 0 %}
            G1 E-{second_cut_retract_length} F3000
            _DO_CUT_MOTION RIP_LENGTH=-1
            G1 E{second_cut_retract_length} F3000
        {% endif %}

        # pushback of the tip residual into the hotend
        {% if PUSHBACK_LENGTH > 0 %} 
            G1 E{PUSHBACK_LENGTH} F1000 
            G4 P{push_dwell_time}
            G1 E-{PUSHBACK_LENGTH} F1000
            # {% set _extruder_moved_dist = _extruder_moved_dist - PUSHBACK_LENGTH %}
        {% endif %}
        
        {% if FINAL_EJECT == 1 %}
            G1 E-80 F3000
            # {% set _extruder_moved_dist = _extruder_moved_dist + 80 %}
        {% endif %}

        G0 X500 F{travel_spd}                                                       # Fast move X inside the safezone, so we don't crash into other tools.


    #    {% set move_to_next_loc = ((x_after_toolchange != -1000) and (y_after_toolchange != -1000)) | int %}
    #    {% if move_to_next_loc %}
    #        G1 X{x_after_toolchange} Y{y_after_toolchange} F{travel_spd}
    #    {% endif %}

    #   _SET_LOC_AFTER_TOOLCHANGE # clears the location
        RESTORE_GCODE_STATE NAME=_MMU_CUT_TIP_state #MOVE_SPEED=250

        M400                                                                 #Finish the move before enabling 
        SET_GCODE_VARIABLE MACRO=HOMING_STATUS VARIABLE=maxx VALUE=1         # Use the X max as EmergencyStop.

    {% endif %}
    # {% endif %}

#[gcode_macro _SET_LOC_AFTER_TOOLCHANGE]
#description: Set the location to travel after making a cut
#gcode:
#    # Note that we use an extremely negative number to represent that we not moving anywhere afte toolchange
#    {% set x_after_toolchange = params.X | default (-1000) | float %}
#    {% set y_after_toolchange = params.Y | default (-1000) | float %}
#    SET_GCODE_VARIABLE macro=_MMU_CUT_TIP variable=x_after_toolchange value={x_after_toolchange}
#    SET_GCODE_VARIABLE macro=_MMU_CUT_TIP variable=y_after_toolchange value={y_after_toolchange}


[gcode_macro _DO_CUT_MOTION]
description: helper to do a single horizontal cut movement
gcode:
    {% set current_offset_x = printer.gcode_move.position.x - printer.gcode_move.gcode_position.x %}
    # {% set current_offset_y = printer.gcode_move.position.y - printer.gcode_move.gcode_position.y %}

    {% set pin_park_x_loc = printer['gcode_macro _MMU_CUT_TIP']['pin_loc_x'] | float - current_offset_x %}
    # {% set pin_park_y_loc = printer['gcode_macro _MMU_CUT_TIP']['loc_y'] | float - current_offset_y %}
    {% set pin_loc_x_compressed = printer['gcode_macro _MMU_CUT_TIP']['pin_loc_x_compressed'] | float - current_offset_x %}

    {% set rip_length = params.RIP_LENGTH | default(-1) | float %}

    {% set travel_spd = printer['gcode_macro _MMU_CUT_TIP']['travel_spd'] | float %}
    {% set cut_fast_move_fraction = printer['gcode_macro _MMU_CUT_TIP']['cut_fast_move_fraction'] | float %}
    {% set cut_fast_move_spd = printer['gcode_macro _MMU_CUT_TIP']['cut_fast_move_spd'] | float %}
    {% set cut_slow_move_spd = printer['gcode_macro _MMU_CUT_TIP']['cut_slow_move_spd'] | float %}
    {% set cut_dwell_time = printer['gcode_macro _MMU_CUT_TIP']['cut_dwell_time'] | float %}
    {% set evacuate_speed = printer['gcode_macro _MMU_CUT_TIP']['evacuate_speed'] | float %}
    {% set rip_spd = printer['gcode_macro _MMU_CUT_TIP']['rip_spd'] | float %}

    {% set fast_slow_transition_loc = (pin_loc_x_compressed - pin_park_x_loc) * cut_fast_move_fraction + pin_park_x_loc | float %}

    G1 X{fast_slow_transition_loc} F{cut_fast_move_spd} # make a fast move to initiate contact of the blade with the filament
    G1 X{pin_loc_x_compressed} F{cut_slow_move_spd} # do the cut in slow move
    G4 P{cut_dwell_time}
    {% if rip_length > 0 %}
        G1 E-{rip_length} F{rip_spd}
    {% endif %}
    G1 X{pin_park_x_loc} F{evacuate_speed} # evacuate