########################################################################################################################
# Happy Hare supporting macros
#  Miscellaneious setup and supporting macros
#
# THIS FILE IS READ ONLY
#

###########################################################################
# NECESSARY KLIPPER OVERRIDES
# These supplemental settings essentially disable klipper's built in
# extrusion limits and is necessary when using an MMU
#
[extruder]
max_extrude_only_distance: 200
max_extrude_cross_section: 50

# For dialog prompts in Mainsail
# Requires Mainsail version >= v2.9.0
#
[respond]


###########################################################################
# Convenience print start marco that users can call directly from their
# slicer's custom "start g-code" or call from existing start marco
#
# To call from slicer (recommended), add these lines to your custom start
# g-code (before and after the call to your regular print start macro).
# It is recommended to separate the filament purge portion of the start
# sequence until after the initial tool is loaded.
#
#   Slicer: Custom Start g-code
#   +----------------------------------------------------------+
#   | ; Initialize MMU and save info from gcode file           |
#   | MMU_START_SETUP INITIAL_TOOL={initial_tool}              |
#   |                 REFERENCED_TOOLS=!referenced_tools!      |
#   |                 TOOL_COLORS=!colors!                     |
#   |                 TOOL_TEMPS=!temperatures!                |
#   |                 TOOL_MATERIALS=!materials!               |
#   |                 PURGE_VOLUMES=!purge_volumes!            |
#   |                                                          |
#   | ; Check MMU is setup for the slicer defined print        |
#   | MMU_START_CHECK                                          |
#   |                                                          |
#   | ; Bed leveling, heating logic, etc for print start       |
#   | ; (Nothing that requires filament in extruder)           |
#   | PRINT_START ; call you existing macro here..             |
#   |                                                          |
#   | ; Load slicer defined initial tool into MMU              |
#   | MMU_START_LOAD_INITIAL_TOOL                              |
#   |                                                          |
#   | ; Final purge logic before starting to print             |
#   | ..optionally call you purge logic start macro..          |
#   +----------------------------------------------------------+
#
# NOTE: The reason that it is recommended to add these 4 or 5 lines to your
# slicer is to keep them as separate gcode macros to enable the print to
# pause in the case of an error.  If you bundle everything into a single
# print start macro then the first opportunity to pause will be at the end
# of that, potentially long running, macro!
#
# Alternatively you can pass in the params to your existing print start
# macro and then insert these calls in that macro (but not recommended
# because of pause warning above)
#
#    MMU_START_SETUP {rawparams}
#    MMU_START_CHECK
#    MMU_START_LOAD_INITIAL_TOOL
#
[gcode_macro MMU_START_SETUP]
description: Called when starting print to setup MMU
gcode:
    {% set initial_tool = params.INITIAL_TOOL|default(0)|int %}
    {% set ttg_map = printer.mmu.ttg_map %}
    {% set referenced_tools = (params.REFERENCED_TOOLS|default("!referenced_tools!")|string).split(",")
        if (params.REFERENCED_TOOLS and params.REFERENCED_TOOLS != "")
        else [] %}
    {% set tool_colors = (params.TOOL_COLORS|default("")|string).split(",")
        if (params.TOOL_COLORS and params.TOOL_COLORS != "!colors!" and params.TOOL_COLORS != "")
        else ['000000'] * ttg_map|length %}
    {% set tool_temps = (params.TOOL_TEMPS|default("")|string).split(",")
        if (params.TOOL_TEMPS and params.TOOL_TEMPS != "!temperatures!" and params.TOOL_TEMPS != "")
        else ['0'] * ttg_map|length %}
    {% set tool_materials = (params.TOOL_MATERIALS|default("")|string).split(",")
        if (params.TOOL_MATERIALS and params.TOOL_MATERIALS != "!materials!" and params.TOOL_MATERIALS != "")
        else ['unknown'] * ttg_map|length %}
    {% set purge_volumes = (params.PURGE_VOLUMES|default("")|string)
        if (params.PURGE_VOLUMES and params.PURGE_VOLUMES != "!purge_volumes!" and params.PURGE_VOLUMES != "")
        else "" %}

    {% set vars = printer['gcode_macro _MMU_SOFTWARE_VARS'] %}
    {% set home_mmu = vars.home_mmu|lower == 'true' %}

    {% set filament_loaded = printer.mmu.filament_pos == 10 %}
    {% set using_bypass = printer.mmu.tool == -2 and filament_loaded %}
    {% set num_colors = referenced_tools|length %}

    {% if printer.mmu.enabled %}
        # Precaution for when printing from Octoprint (optional, but harmless if printing from virtual SD card)
        {% if vars.octoprint_compat %}
            _MMU_PRINT_START
        {% endif %}

        # Typically this would be a G28 to ensure homing in case of pause
        {% if not vars.user_pre_initialize_extension == "" %} 
            {vars.user_pre_initialize_extension}
        {% endif %}

        # Establish number of colors in print and tools being used
        {% if referenced_tools == ['!referenced_tools!'] %}
            RESPOND MSG="Happy Hare gcode pre-processor is probably disabled or not setup correctly"
            {% set referenced_tools = [] %}
            {% set num_colors = -1 %}
        {% elif referenced_tools == [] %}
            {% set num_colors = 1 %}
        {% endif %}

        # Setup slicer tool map and custom gates colors
        MMU_LED RESET=1	QUIET=1							# Reset custom colors for all gates to black

        MMU_SLICER_TOOL_MAP INITIAL_TOOL={initial_tool} PURGE_VOLUMES={purge_volumes}
        {% for t in referenced_tools %}
            # Setup slicer tool map for print
            MMU_SLICER_TOOL_MAP TOOL={t} TEMP={tool_temps[t|int]} MATERIAL={tool_materials[t|int]} COLOR={tool_colors[t|int]} QUIET=1
        {% endfor %}

        {% set custom_msg = [] %}
        {% set m = [] %}
        {% for tool in referenced_tools %}
            {% set _ = m.append("T" + tool|string + " (Gate" + ttg_map[tool|int]|string + ")") %}
        {% endfor %}
        {% set line = "Initial Tool: T%s" % initial_tool %}
        {% set _ = m.append(line) %}
        {% set _ = custom_msg.append("Print requires tools: %s" % ", ".join(m)) %}
        {% set _ = custom_msg.append("Manually ensure that T" + initial_tool|string + " is loaded and all other tools available before resuming print") %}
        MMU_SLICER_TOOL_MAP

        SET_GCODE_VARIABLE MACRO=_MMU_ERROR_DIALOG VARIABLE=show_abort VALUE={True} # Show abort option during startup
        {% if using_bypass %}
            RESPOND MSG="MMU Bypass selected"
            {% if num_colors > 1 %}
                SET_GCODE_VARIABLE MACRO=_MMU_ERROR_DIALOG VARIABLE=custom_msg VALUE="{custom_msg}"
                MMU_PAUSE MSG="Bypass selected for multi-color print"
            {% endif %}
        {% else %}
            # Preemptively set verbose dialog message in case of additional mmu error during start
            SET_GCODE_VARIABLE MACRO=_MMU_ERROR_DIALOG VARIABLE=custom_msg VALUE="{custom_msg}"
            {% if home_mmu %}
                {% if not filament_loaded %} 
                    MMU_HOME
                {% else %}
                    RESPOND MSG="Skipping homing MMU because filament is already loaded"
                {% endif %}
            {% endif %}
         {% endif %}
    {% endif %}
    SET_GCODE_VARIABLE MACRO=_MMU_RUN_MARKERS VARIABLE=mmu_start_setup_run VALUE={True}


###########################################################################
# Helper macro to check required gates have filament. This is separated out
# from main setup macro to allow for pausing on previous error first
#
[gcode_macro MMU_START_CHECK]
description: Helper macro. Can be called to perform pre-start checks on MMU based on slicer requirements
gcode:
    {% set vars = printer['gcode_macro _MMU_SOFTWARE_VARS'] %}
    {% set check_gates = vars.check_gates|lower == 'true' %}
    {% set using_bypass = printer.mmu.tool == -2 %}

    {% if printer.mmu.enabled %}
        {% set slicer_tool_map = printer.mmu.slicer_tool_map %}
        {% set initial_tool = slicer_tool_map.initial_tool %}
        {% set tools = slicer_tool_map.tools %}
        {% if not using_bypass or tools|length > 1 %}
            # Future: Could do extra checks like filament material type/color checking here
            #         to ensure what's loaded on MMU matches the slicer expectations
            {% if check_gates and tools|length > 0 %}
                # Pre-check gates option if multi-color print. Will pause if tools missing
                RESPOND MSG="Checking all required gates have filament loaded..."
                {% if not printer.mmu.is_homed %}
                    MMU_HOME
                {% endif %}
                MMU_CHECK_GATE TOOLS={tools|join(",")}
            {% endif %}
        {% endif %}
    {% endif %}
    SET_GCODE_VARIABLE MACRO=_MMU_RUN_MARKERS VARIABLE=mmu_start_check_run VALUE={True}


###########################################################################
# Helper macro to load the initial tool. This is separated out from main
# setup macro to allow for pausing on previous error first
#
[gcode_macro MMU_START_LOAD_INITIAL_TOOL]
description: Helper to load initial tool if not paused
gcode:
    {% set vars = printer['gcode_macro _MMU_SOFTWARE_VARS'] %}
    {% set load_initial_tool = vars.load_initial_tool|lower == 'true' %}
    {% set using_bypass = printer.mmu.tool == -2 %}
    {% set filament_loaded = printer.mmu.filament_pos == 10 %}

    {% if printer.mmu.enabled %}
        {% set slicer_tool_map = printer.mmu.slicer_tool_map %}
        {% set initial_tool = slicer_tool_map.initial_tool %}
        {% set tools = slicer_tool_map.tools %}
        {% if not using_bypass or tools|length > 1 %}
            {% if load_initial_tool and (initial_tool is not none and initial_tool >= 0) %}
                RESPOND MSG="Loading initial tool T{initial_tool}..."
                MMU_CHANGE_TOOL STANDALONE=1 TOOL={initial_tool}
            {% endif %}
        {% elif not filament_loaded %}
            MMU_PAUSE MSG="Load bypass or initial tool before resuming print"
        {% else %}
            RESPOND MSG="Using bypass"
        {% endif %}
    {% endif %}

    # Important: Clear preemptive error message and remove abort option from pause dialog
    SET_GCODE_VARIABLE MACRO=_MMU_ERROR_DIALOG VARIABLE=custom_msg VALUE='""'
    SET_GCODE_VARIABLE MACRO=_MMU_ERROR_DIALOG VARIABLE=show_abort VALUE={False}
    SET_GCODE_VARIABLE MACRO=_MMU_RUN_MARKERS VARIABLE=mmu_start_load_initial_tool_run VALUE={True}


###########################################################################
# Convenience print end marco that users can call directly from their
# slicer's custom "end g-code" or call from existing end marco
# 
# To call from slicer, add this to custom end g-code (possibly as one line
# just after the call to your regular print end macro) or call directly from
# without your existing print end macro:
#
#   Slicer: Custom End g-code
#   +----------------------------------------------------------+
#   | ; Finalize MMU and optionally eject filament             |
#   | MMU_END                                                  |
#   |                                                          |
#   | ; Your existing print end macro                          |
#   | PRINT_END                                                |
#   +----------------------------------------------------------+
#
[gcode_macro MMU_END]
description: Called when ending print to finalize MMU
gcode:
    {% set eject = params.EJECT|default(0) %}
    {% set vars = printer['gcode_macro _MMU_SOFTWARE_VARS'] %}
    {% set eject_tool = vars.eject_tool|lower == 'true' %}
    {% set octoprint_compat = vars.octoprint_compat|lower == 'true' %}
    {% set reset_ttg = vars.reset_ttg|lower == 'true' %}
    {% set dump_stats = vars.dump_stats|lower == 'true' %}

    {% if printer.mmu.enabled %}
        {% if eject or eject_tool %}
            MMU_EJECT
        {% endif %}

        {% if reset_ttg %}
            MMU_TTG_MAP RESET=1 QUIET=1
        {% endif %}

        {% if dump_stats %}
            MMU_STATS
        {% endif %}

        # Precaution for when printing from Octoprint (optional, but harmless if printing from virtual SD card)
        {% if octoprint_compat %}
            _MMU_PRINT_END
        {% endif %}
    {% endif %}
    SET_GCODE_VARIABLE MACRO=_MMU_RUN_MARKERS VARIABLE=mmu_end_run VALUE={True}


###########################################################################
# Helper macros to display dialog in supporting UI's when MMU pauses
#
[gcode_macro _MMU_ERROR_DIALOG]
description: Helper to display pause dialog
variable_custom_msg: '' # List of additional custom message lines to append in dialog
variable_show_abort: False
gcode:
    {% set message = params.MSG|string %}
    {% set reason = params.REASON|string %}
    RESPOND TYPE=command MSG="action:prompt_begin Happy Hare Error Notice"
    RESPOND TYPE=command MSG='{"action:prompt_text %s" % message}'
    RESPOND TYPE=command MSG='{"action:prompt_text Reason: %s" % reason}'
    {% if not custom_msg == "" %}
        {% for line in custom_msg %}
            RESPOND TYPE=command MSG='{"action:prompt_text %s" % line}' 
        {% endfor %}
    {% else %}
        RESPOND TYPE=command MSG="action:prompt_text After fixing, call RESUME to continue printing (MMU_UNLOCK to restore temperature)"
    {% endif %}
    RESPOND TYPE=command MSG="action:prompt_button_group_start"
    {% if show_abort %}
        RESPOND TYPE=command MSG="action:prompt_button ABORT|CANCEL_PRINT|error"
    {% endif %}
    RESPOND TYPE=command MSG="action:prompt_button UNLOCK|MMU_UNLOCK|secondary"
    RESPOND TYPE=command MSG="action:prompt_button RESUME|RESUME|warning"
    RESPOND TYPE=command MSG="action:prompt_button_group_end"
    RESPOND TYPE=command MSG="action:prompt_show"
    {% set custom_msg = "" %}


###########################################################################
# Helper for Klippain to reset start/end step "run" trackers
#
[gcode_macro _MMU_RUN_MARKERS]
variable_mmu_start_setup_run: False
variable_mmu_start_check_run: False
variable_mmu_start_load_initial_tool_run: False
variable_mmu_end_run: False
gcode:
    SET_GCODE_VARIABLE MACRO=_MMU_RUN_MARKERS VARIABLE=mmu_start_setup_run VALUE=False
    SET_GCODE_VARIABLE MACRO=_MMU_RUN_MARKERS VARIABLE=mmu_start_check_run VALUE=False
    SET_GCODE_VARIABLE MACRO=_MMU_RUN_MARKERS VARIABLE=mmu_start_load_initial_tool_run VALUE=False
    SET_GCODE_VARIABLE MACRO=_MMU_RUN_MARKERS VARIABLE=mmu_end_run VALUE=False


###########################################################################
# Simplified subset of commands just for macro visability in
# Mainsail/Fluidd UI (until custom HH panel is complete!)
# The __ is a trick because it is not displayed by the UI but allows for
# similar names to the real commands defined by the klipper module
#
[gcode_macro MMU__EJECT]
gcode: MMU_EJECT

[gcode_macro MMU__HOME]
gcode:
    {% set tool = params.TOOL|default(0)|int %}
    {% set force_unload = params.FORCE_UNLOAD|default(0)|int %}
    MMU_HOME TOOL={tool} FORCE_UNLOAD={force_unload}

[gcode_macro MMU__STATUS]
gcode: MMU_STATUS

[gcode_macro MMU__MOTORS_OFF]
gcode: MMU_MOTORS_OFF

[gcode_macro MMU__SERVO]
gcode:
    {% set pos = params.POS|default("up")|string %}
    MMU_SERVO POS={pos}

[gcode_macro MMU__SELECT_TOOL]
gcode:
    {% set tool = params.TOOL|default(0)|int %}
    MMU_SELECT TOOL={tool}

[gcode_macro MMU__SELECT_BYPASS]
gcode: MMU_SELECT_BYPASS

[gcode_macro MMU__LOAD_BYPASS]
gcode: MMU_LOAD

[gcode_macro MMU__RECOVER]
gcode: MMU_RECOVER

[gcode_macro MMU__PRELOAD]
gcode:
    {% set gate = params.GATE|default(0)|int %}
    MMU_PRELOAD GATE={gate}

[gcode_macro MMU__CHECK_GATE]
gcode:
    {% set gate = params.GATE|default(-1)|int %}
    {% set tool = params.GATE|default(-1)|int %}
    {% set gates = params.GATE|default('!')|string %}
    {% set tools = params.GATE|default('!')|string %}
    MMU_CHECK_GATE GATE={gate} TOOL={tool} GATES={gates} TOOLS={tools}


###########################################################################
# Aliases (for backward compatibility) of previously well used commands...
#
[gcode_macro MMU_CHANGE_TOOL_STANDALONE]
description: Convenience macro for inclusion in print_start for initial tool load
gcode:
    MMU_CHANGE_TOOL {rawparams} STANDALONE=1

[gcode_macro MMU_CHECK_GATES]
description: Alias for updated macro name of MMU_CHECK_GATE
gcode:
    MMU_CHECK_GATE {rawparams}

[gcode_macro MMU_REMAP_TTG]
description: Alias for updated macro name of MMU_TTG_MAP
gcode:
    MMU_TTG_MAP {rawparams}

[gcode_macro MMU_FORM_TIP]
description: Alias for updated macro name of MMU_TEST_FORM_TIP
gcode:
    MMU_TEST_FORM_TIP {rawparams}

